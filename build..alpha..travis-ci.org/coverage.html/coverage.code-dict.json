{"/home/travis/build/npmtest/node-npmtest-draftlog/test.js":"/* istanbul instrument in package npmtest_draftlog */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-draftlog/lib.npmtest_draftlog.js":"/* istanbul instrument in package npmtest_draftlog */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_draftlog = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_draftlog = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-draftlog/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-draftlog && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_draftlog */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_draftlog\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_draftlog.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_draftlog.rollup.js'] =\n            local.assetsDict['/assets.npmtest_draftlog.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_draftlog.__dirname + '/lib.npmtest_draftlog.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-draftlog/node_modules/draftlog/index.js":"module.exports = require('./lib')","/home/travis/build/npmtest/node-npmtest-draftlog/node_modules/draftlog/lib/index.js":"'use strict'\n\n// Lib main object is 'into' method\nvar Lib = require('./into')\n\n// Expose injecter 'into' method\nLib.into = Lib\n\n// Expose Defaults\nLib.defaults = require('./defaults')\n\n// Expose CSIHelper\nLib.CSIHelper = require('./CSIHelper')\n\n// Expose LogDraft\nLib.LogDraft = require('./LogDraft')\n\n// Expose LineCountStream\nLib.LineCountStream = require('./LineCountStream')\n\n// Expose API\nmodule.exports = Lib","/home/travis/build/npmtest/node-npmtest-draftlog/node_modules/draftlog/lib/into.js":"'use strict'\nconst defaults = require('./defaults')\nconst LogDraft = require('./LogDraft')\nconst LineCountStream = require('./LineCountStream')\n\n/*\n * Injects DrafLog into a console object\n * call with a seccond parameter as 'true' to \n * Mock instalation, and add only the `draft` method\n * as a alias to `console.log`\n */\nmodule.exports = function into(console, extra) {\n  // If extra is set to `true`, it's production mode\n  var production = (extra === true ? true : false)\n\n  // If production mode, mock api\n  if (production) {\n    // Mock draft and set is as console.log\n    console.draft = function draft() {\n      // Log this\n      console.log.apply(null, arguments)\n\n      // Return usual console.log method\n      return console.log.bind(console)\n    }\n    return \n  }\n\n  // Transform stdout from console to LineCounter\n  var lineCountStream = LineCountStream(console._stdout)\n  console._stdout = lineCountStream\n\n  // Can it bind to process.stdin automatically?\n  if (defaults.stdinAutoBind) {\n    lineCountStream.addLineListener(process.stdin)\n  }\n\n  // Add \"draft\" to console\n  console.draft = console.draft || function draft() {\n    // Create Draft at this point in time\n    var logDraft = new LogDraft(console, 'log')\n\n    // Log first\n    logDraft.write.apply(logDraft, arguments)\n\n    // Return update function\n    return logDraft.update.bind(logDraft)\n  }\n\n  // Return the created Transform Stream\n  return lineCountStream\n}","/home/travis/build/npmtest/node-npmtest-draftlog/node_modules/draftlog/lib/defaults.js":"module.exports = {\n  /*\n   * Number of lines after log has been created, to stop updating Log\n   * Default value if console does not support rows counting\n   */\n  maximumLinesUp: 30,\n\n  /*\n   * ReWrites the line if maximumLinesUp reached, and reset _line\n   */\n  canReWrite: true,\n\n  /*\n   * Allows automatically binding to process.stdin as a input source.\n   * Set to false, because it prevents the process from exiting,\n   * and that's not cool. Let user decide if it's good to use or not.\n   * Calls lineCountStream.addLineListener(process.stdin) when true\n   */\n  stdinAutoBind: false,\n}","/home/travis/build/npmtest/node-npmtest-draftlog/node_modules/draftlog/lib/LogDraft.js":"'use strict'\nconst util = require('util')\nconst defaults = require('./defaults')\nconst CSIHelper = require('./CSIHelper')\n\n// Expose\nmodule.exports = LogDraft\n\n/*\n * This is a single Line object, that saves it's relative position\n * in terminal. It is responsible by updating itself.\n */\nfunction LogDraft(console, methodName) {\n  this._stream = console._stdout\n  this._styleFn = console[methodName]\n\n  // Valid flag. If set to false, should NOT write anymore\n  this.valid = true\n\n  // Save line where content will be saved\n  this.saveLine()\n}\n\n/*\n * After creating a draft, you can call as many times as you want to update it\n */\nLogDraft.prototype.update = function update(/* log arguments */) {\n  // Get line difference\n  var linesUp = this.linesUp()\n\n  // Check if is offscreen\n  if (this.isOffScreen()) {\n    if (defaults.canReWrite) {\n      // It can be rewritten, move line to current cursor line, and keep updating\n      this.saveLine(-1)\n    } else {\n      // Invalidate and prevent writting\n      this.valid = false\n      return;\n    }\n  }\n\n  // Start editing stream\n  this._stream.stopLineCount()\n\n  // Save state (if content is not null)\n  this._stream.write(CSIHelper.save())\n\n  // Move up cursor up\n  this._stream.write(CSIHelper.up(linesUp))\n\n  // Clear line\n  this._stream.write(CSIHelper.clearLine())\n\n  // Call write function\n  this.write.apply(this, arguments)\n\n  // Restore state\n  this._stream.write(CSIHelper.restore())\n\n  // Resume counting lines\n  this._stream.resumeLineCount()\n}\n\n/*\n * Returns true if line is out of screen\n */\nLogDraft.prototype.isOffScreen = function isOffScren() {\n  var rows = this._stream.rows() || defaults.maximumLinesUp\n  return this._stream.rows() <= this.linesUp()\n}\n\n/*\n * Return how many lines past our current log\n */\nLogDraft.prototype.linesUp = function linesUp() {\n  return this._stream.line() - this._line\n}\n\n/*\n * Writes to the stream by calling the writeFn. \n * Will not print if it's invalid\n * Defaults to `_stream.write` (set on constructor)\n */\nLogDraft.prototype.write = function write() {\n  this.valid && this._styleFn.apply(this._styleFn, arguments)\n}\n\n/*\n * Saves current line number as the insertion point\n */\nLogDraft.prototype.saveLine = function saveLine(relative) {\n  relative = relative || 0\n  this._line = this._stream.line() + relative\n}","/home/travis/build/npmtest/node-npmtest-draftlog/node_modules/draftlog/lib/CSIHelper.js":"/*\n * CSIHelper, or \"Control Sequence Introducer Helper\" is the translator of actions into\n * sequence of ANSI characters that will trigger some action in the Terminal.\n *\n * Note: CSI is not from the TV Series.\n *\n * More info: \n *  - https://en.wikipedia.org/wiki/ANSI_escape_code\n *  - http://tldp.org/HOWTO/Bash-Prompt-HOWTO/x361.html\n *  - http://ascii-table.com/ansi-escape-sequences-vt-100.php\n */\nvar CSIHelper = module.exports = {}\n\nconst ESC = CSIHelper.ESC = '\\u001b'\n\n/*\n * Save current cursor position\n */\nCSIHelper.save = function save() {\n  return '\\u001b7'\n}\n\n/*\n * Restore cursor position\n */\nCSIHelper.restore = function restore() {\n  return '\\u001b8'\n}\n\n/*\n * Move cursor up `n` lines. Default is 1\n */\nCSIHelper.up = function up(n) {\n  n = typeof n === 'number' ? n : 1\n  return n > 0 ? ESC + '[' + n + 'A' : ''\n}\n\n/*\n * Move cursor down `n` lines. Default is 1\n */\nCSIHelper.down = function down(n) {\n  n = typeof n === 'number' ? n : 1\n  return n > 0 ? ESC + '[' + n + 'B' : ''\n}\n\nCSIHelper.clearLine = function clearLine() {\n  return ESC + '[2K' + ESC + '[1G'\n}","/home/travis/build/npmtest/node-npmtest-draftlog/node_modules/draftlog/lib/LineCountStream.js":"'use strict'\nconst util = require('util')\nconst stream = require('stream')\nconst PassThrough = stream.PassThrough\n\n// Expose\nmodule.exports = LineCountStream\n\n/*\n * This is a PassThrough stream that keep track of how many lines have been logged.\n *\n * TODO: Account for terminal size changes/wrapping\n */\nfunction LineCountStream(outStream) {\n  // Checks if the outStream is already a LineCountStream. If so, return it\n  if (outStream instanceof LineCountStream)\n    return outStream\n\n  // Make sure this is a new instance\n  if (!(this instanceof LineCountStream))\n    return new LineCountStream(outStream)\n\n  // Call super constructor\n  PassThrough.call(this)\n\n  // Save outStream\n  this._outStream = outStream\n\n  // Initialize line and logs (line starts as 1)\n  this._line = 1\n  this._logs = 0\n\n  // Flag indicating a change is being made not with current cursor\n  this._editing = false\n\n  // Pipe this data to output stream\n  outStream && this.pipe(outStream)\n}\n\n// Inherits from PassThrough\nutil.inherits(LineCountStream, PassThrough)\n\n/*\n * Get current line\n */\nLineCountStream.prototype.line = function line() {\n  return this._line\n}\n\n/*\n * Get log count\n */\nLineCountStream.prototype.logs = function logs() {\n  return this._logs\n}\n\n/*\n * On write, increment lines and logs\n *\n * Benchmark: http://jsperf.com/count-the-number-of-characters-in-a-string\n */\nLineCountStream.prototype.write = function write(data) {\n  if (! this._editing) {\n    this.countLines(data)\n  }\n  this.push(data)\n}\n\n/*\n * Binds a inputStream to this, in order to account for extra lines\n * typed in the Terminal.\n * This method will bind event 'data' into the stream, and call\n * countLines(data) with the data. It will not account for '_editing',\n * because there can be user input while editing.\n */\nLineCountStream.prototype.addLineListener = function addLineListener(inStream) {\n  // Binds to 'data' event\n  inStream.on('data', this.countLines.bind(this))\n}\n\n/*\n * Counts lines on the data and increment counters.\n * Compensation for `_editing` mode should be done \n * outside this method. Keep this as clean as possible\n */\nLineCountStream.prototype.countLines = function countLines(data) {\n  var dataLines = (data.toString().split('\\n').length - 1)\n  this._logs++\n  this._line += dataLines || 0\n}\n\n/*\n * Call this to stop line counts (during some change of data in previous records)\n */\nLineCountStream.prototype.stopLineCount = function stopLineCount() {\n  this._editing = true\n}\n\n/*\n * Call this to resume line counts\n */\nLineCountStream.prototype.resumeLineCount = function resumeLineCount() {\n  this._editing = false\n}\n\n/*\n * Proxy rows from the stream\n */\nLineCountStream.prototype.rows = function rows() {\n  return this._outStream.rows\n}\n\n/*\n * Proxy columns from the stream\n */\nLineCountStream.prototype.columns = function columns() {\n  return this._outStream.columns\n}"}